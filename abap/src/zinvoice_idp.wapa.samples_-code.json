{                                                                                                                                                                                                                                                              
 "s3":"DATA(lo_session) = /aws1/cl_rt_session_aws=>create( iv_profile_id =  lv_pfl  ).\nDATA(lo_s3)      = /aws1/cl_s3_factory=>create( lo_session ).\n\n* List buckets\nDATA(lt_buckets) = lo_s3->listbuckets( )->get_buckets( ).\n\nLOOP AT lt_buckets INTO +
DATA(lo_bucket).\n\n  CALL METHOD lo_bucket->get_name\n    RECEIVING\n      ov_name = DATA(lv_bucket).\n\n  APPEND INITIAL LINE TO  lt_bucketnames ASSIGNING FIELD-SYMBOL(<fs_name>).\n\n  <fs_name>-bucket = lv_bucket.\nENDLOOP.\n\ncl_demo_output=>display(+
 lt_bucketnames ).",                                                                                                                                                                                                                                           
 "translate": "*Create Session\n  DATA(lo_session) = /aws1/cl_rt_session_aws=>create( iv_profile_id = lv_pfl ).\n* Translate\n  DATA(lo_xl8)     = /aws1/cl_xl8_factory=>create( lo_session ).\n* Translate Description\n  CALL METHOD lo_xl8->translatetext\n+
    EXPORTING\n      iv_text               = p_desc\n      iv_sourcelanguagecode = 'auto'    \" will use comprehend to do lang detection\n      iv_targetlanguagecode = 'de'\n    RECEIVING\n      oo_output             = DATA(lo_output).\n\n  DATA(lv_trans+
_desc) = lo_output->get_translatedtext( ).\n\n cl_demo_output=>display( lv_trans_desc ).",                                                                                                                                                                     
 "lambda": "DATA(lo_session) = /aws1/cl_rt_session_aws=>create( iv_profile_id = lv_pfl ).\nDATA(lo_lmd)     = /aws1/cl_lmd_factory=>create( lo_session ).\n\nDATA(lv_json) = /aws1/cl_rt_util=>string_to_xstring(\n           `{`  &&\n             `\"message+
\": \"test\"` &&\n           `}` ).\n\nDATA(lo_result) = lo_lmd->invoke(\n                    iv_functionname = 'abap-sdk-example'\n                    iv_payload = lv_json ).\n\ncl_demo_output=>display_json( lo_result->get_payload( ) ).",                
 "textract": "* Create session\n  DATA(lo_session) = /aws1/cl_rt_session_aws=>create( iv_profile_id = 'DEMO'  ).\n\n* Initializae client using the SDK\n  lo_textract = /aws1/cl_tex_factory=>create( go_session ).\n\n* Document object for textract\n  DATA(+
lo_s3object) = NEW /aws1/cl_texs3object( iv_bucket = p_bucket\n                                                iv_name   = p_key  ).\n\n* document location\n  DATA(lo_document) =\n  NEW /aws1/cl_texdocument( io_s3object = lo_s3object ).\n\n  DATA(lo_docu+
mentlocation) =\n  NEW /aws1/cl_texdocumentlocation( io_s3object = lo_s3object ).\n\nTRY.\n  DATA(lo_expresp) =  go_textract->analyzeexpense(\n      EXPORTING\n        io_document    =  lo_document\n    ).\n\n    CATCH /AWS1/CX_TEXUNSUPPORTEDDOCEX into d+
ata(lo_ex).\n\nENDTRY.",                                                                                                                                                                                                                                       
 "bedrock": "DATA: BEGIN OF ls_bedrock_request_body,\n        anthropic_version    TYPE string,\n        max_tokens_to_sample TYPE i,\n        prompt               TYPE string,\n        temperature          TYPE i,\n        top_k                TYPE i,\n+
        top_p                TYPE p DECIMALS 3,\n      END    OF ls_bedrock_request_body.\n\nDATA: BEGIN OF ls_response,\n        completion TYPE string,\n      END OF ls_response.\n\nDATA(lo_session) = /aws1/cl_rt_session_aws=>create( iv_profile_id = 'D+
EMO' ).\nDATA(lo_bedrock) = /aws1/cl_bdr_factory=>create( lo_session ).\n\nDATA(lv_context) = |Hello Bedrock|.\nDATA(lv_prompt)  = |Translate the text provided in the context: { lv_context } to Hebrew|.\n\nls_bedrock_request_body-anthropic_version = 'ant+
hropic.claude-v2'.\nls_bedrock_request_body-max_tokens_to_sample = 2048.\nls_bedrock_request_body-prompt = |Human: { lv_prompt }{ cl_abap_char_utilities=>newline }Assistant:|.\nls_bedrock_request_body-temperature = 1.\nls_bedrock_request_body-top_k = 250+
.\nls_bedrock_request_body-top_p = 1.\n\nDATA(lv_json_body) = /ui2/cl_json=>serialize( data = ls_bedrock_request_body\npretty_name = /ui2/cl_json=>pretty_mode-low_case ).\n\nDATA(lo_response) = lo_bedrock->invokemodel( iv_body = /aws1/cl_rt_util=>string_+
to_xstring( lv_json_body )\niv_contenttype = 'application/json'\niv_modelid = 'anthropic.claude-v2'\niv_accept = '*/*' ).\n\nDATA(lv_resp_body) = lo_response->get_body( ).\n\nDATA(lv_resp_json) =  /aws1/cl_rt_util=>xstring_to_string( lv_resp_body ).\n\n/+
ui2/cl_json=>deserialize(\n    EXPORTING\n    json             =    lv_resp_json\n    pretty_name      =    /ui2/cl_json=>pretty_mode-low_case\n    CHANGING\n    data             =    ls_response              \" Data to serialize\n)."                     
}                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               
                                                                                                                                                                                                                                                               